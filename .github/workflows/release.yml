# This workflows will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python releases

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  autorelease:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    # Perma-cache Poetry since we only need it for checking pyproject version
    - name: Cache Poetry
      id: cache-poetry
      uses: actions/cache@v3
      with:
        path: ~/.poetry
        key: ${{ matrix.os }}-poetry
    # Only runs when key from caching step changes
    - name: Install latest version of Poetry
      if: steps.cache-poetry.outputs.cache-hit != 'true'
      run: curl -sSL https://install.python-poetry.org | python3 -
    # Poetry still needs to be re-prepended to the PATH on each run, since
    # PATH does not persist between runs.
    - name: Add Poetry to $PATH
      run: |
        echo "$HOME/.poetry/bin" >> $GITHUB_PATH
    - name: Get Poetry version
      run: poetry --version
    - name: Check pyproject.toml validity
      run: poetry check --no-interaction
    - name: Add version to environment vars
      run: |
        PROJECT_VERSION=$(poetry version --short)
        echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV
    - name: Check if tag version matches project version
      run: |
        TAG=$(git describe HEAD --tags --abbrev=0)
        echo $TAG
        echo $PROJECT_VERSION
        if [[ "$TAG" != "v$PROJECT_VERSION" ]]; then exit 1; fi
    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v3
      with:
        path: ${{github.workspace}}/.venv
        key: ${{ matrix.os }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: ${{ matrix.os }}-
    - name: Install deps
      if: steps.cache-deps.cache-hit != 'true'
      run: |
        poetry config virtualenvs.in-project true
        poetry install --no-interaction
    - name: Run tests
      run: |
        poetry add pytest --no-interaction
        poetry run pytest -v
    - name: Run black linter
      run: |
        poetry add black --no-interaction
        poetry run black
    - name: Run flake8 linter
      run: |
        poetry add flake8 --no-interaction
        poetry run flake8 . --max-complexity=10 --max-line-length=120 --statistics
    - name: Build artifacts
      run: poetry build
    - name: Release Notes
      run: git log $(git describe HEAD~ --tags --abbrev=0)..HEAD --pretty='format:* %h %s%n  * %an <%ae>' --no-merges >> ".github/RELEASE-TEMPLATE.md"
    - name: Create Release Draft
      uses: softprops/action-gh-release@v1
      with:
        body_path: ".github/RELEASE-TEMPLATE.md"
        draft: true
        files: dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
