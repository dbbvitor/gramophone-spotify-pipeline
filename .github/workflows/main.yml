# This workflows will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    # Perma-cache Poetry since we only need it for checking pyproject version
    - name: Cache Poetry
      id: cache-poetry
      uses: actions/cache@v3
      with:
        path: ~/.poetry
        key: poetry-${{ matrix.python-version }}
    # Only runs when key from caching step changes
    - name: Install latest version of Poetry
      if: steps.cache-poetry.outputs.cache-hit != 'true'
      run: curl -sSL https://install.python-poetry.org | python3 -
    # Poetry still needs to be re-prepended to the PATH on each run, since
    # PATH does not persist between runs.
    - name: Add Poetry to $PATH
      run: echo "$HOME/.poetry/bin" >> $GITHUB_PATH
    - name: Get Poetry version
      run: poetry --version
    - name: Check pyproject.toml validity
      run: poetry check --no-interaction
    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v2.1.5
      with:
        path: ${{github.workspace}}/.venv
        key: ${{ matrix.os }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: ${{ matrix.os }}-
    - name: Install deps
      if: steps.cache-deps.cache-hit != 'true'
      run: |
        poetry config virtualenvs.in-project true
        poetry install --no-interaction --without dev,docs
    - name: Run tests
      run: |
        poetry add pytest --no-interaction
        poetry run pytest -v
    - name: Run black linter
      run: |
        poetry add black --no-interaction
        poetry run black src
    - name: Run flake8 linter
      run: |
        poetry add flake8 --no-interaction
        poetry run flake8 . --exclude '.github','.venv','.pytest_cache' --max-complexity=10 --max-line-length=120 --statistics
    - name: Build artifacts
      run: poetry build
